<?php
/**
 * Implements hook_menu().
 */
function uc_begateway_menu() {
  $items = array();

  $items['admin/config/%/uc_begateway/refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_begateway_refund_form', 2),
    'access callback' => TRUE,
  );
  $items['admin/config/%/uc_begateway/capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_begateway_capture_form', 2),
    'access callback' => TRUE,
  );
  $items['admin/config/%/uc_begateway/void'] = array(
    'title' => 'Void',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_begateway_void_form', 2),
    'access callback' => TRUE,
  );
  $items['admin/config/uc_begateway/orders'] = array(
    'title' => 'beGateway orders',
    'description' => 'List of beGateway orders',
    'page callback' => 'uc_begateway_payments',
    'access callback' => 'user_access',
    'access arguments' => array('administer uc_begateway payments'),
    'weight' => 10,
  );
  $items['cart/begateway/complete/%'] = array(
    'title' => 'Order complete',
    'page callback' => 'uc_begateway_complete',
    'page arguments' => array('uc_begateway_notification', 3),
    'access callback' => TRUE,
  );
  $items['uc_begateway/route/%'] = array(
    'page callback' => 'uc_begateway_notification',
    'page arguments' => array('uc_begateway_notification', 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Handling Notification_URL.
 */
function uc_begateway_notification() {
  libraries_load('beGateway');

  \BeGateway\Settings::$shopKey = variable_get('begateway_shop_key', '');
  \BeGateway\Settings::$shopId = variable_get('begateway_shop_id', '');
  \BeGateway\Settings::$gatewayBase = 'https://' . variable_get('begateway_payment_gateway_url', '');
  \BeGateway\Settings::$checkoutBase = 'https://' . variable_get('begateway_checkout_page_url', '');

  $webhook = new \BeGateway\Webhook;

  $order_id = intval($webhook->getTrackingId());
  $order = uc_order_load($order_id);

  if ($order == FALSE) {
    watchdog('ubercart_payment_begateway', 'IPN attempted for non-existent order @order_id.', array('@order_id' => $order_id), WATCHDOG_ERROR);
    die('ERROR01');
  }

  if ($webhook->isAuthorized()) {

      $t_type = $webhook->getResponse()->transaction->type;
      $p_status = NULL;

      if ($webhook->isPending() || $webhook->isIncomplete()) {
        $p_status = 'pending';
      } elseif ($webhook->isSuccess()) {
        if ($t_type == 'authorization') { $p_status = 'pending'; }
        if ($t_type == 'payment') { $p_status = 'paid'; }
      }

      if ($p_status != NULL) {
        $query = db_insert('begateway_payments')->fields(array(
          'order_id' => $order->order_id,
          'created' => time(),
          'uid' => $order->uid,
          'price' => $order->order_total,
          'parent_uid' => $webhook->getUid(),
          'status' => $p_status,
          'types' => $t_type,
          'flag' => '1',
        ))->execute();

        $money = new \BeGateway\Money;

        $money->setCents($webhook->getResponse()->transaction->amount);
        $money->setCurrency($webhook->getResponse()->transaction->currency);

        $comment = t('Transaction ID: @PayId, Paid amount: @PaidAmount, Remote ID: @UID, Payment method: @PayMethod',
          array(
            '@PayId' => $order->order_id,
            '@PaidAmount' => $money->getAmount() . ' ' . $money->getCurrency(),
            '@UID' => $webhook->getUid(),
            '@PayMethod' => $webhook->getPaymentMethod()
          )
        );
        uc_payment_enter($order->order_id, 'begateway', $order->order_total, $order->uid, NULL, $comment);

        if ($webhook->isSuccess() && $p_status == 'paid') {
          uc_cart_complete_sale($order);
          uc_order_update_status($order->order_id, 'payment_received');
        } elseif ($p_status == 'pending') {
          uc_order_update_status($order->order_id, 'pending');
        }
        die('OK');
      }
    } else {
      die('ERROR02');
    }
}

/**
 * Build page with table orders.
 */
function uc_begateway_payments() {

  $header = array(
    t('Id'),
    t('Order Id'),
    t('Created'),
    t('Name/Email'),
    t('Remote uid'),
    t('Price'),
    t('Type'),
    t('Status'),
    t('Operation'),
  );
  $rows = array();
  $query = db_select('begateway_payments', 't')->fields('t', array(
    'id',
    'order_id',
    'created',
    'uid',
    'parent_uid',
    'price',
    'types',
    'status',
    'flag',
    'types',
    'parent_uid'
  ))->execute();

  while ($value = $query->fetchAssoc()) {
    $date = format_date($value['created'], 'custom', 'Y-m-d - H:i:s');

    $title2 = '';
    $void_link = '';
    $title = '';
    $refund_capture_link = '';

    if ($value['flag'] != '0') {
      if ($value['types'] == 'authorization') {

        if ($value['status'] == 'successful' || $value['status'] == 'captured') {
          $title = t('Refund');
          $refund_capture_link = 'admin/config/' . $value['id'] . '/uc_begateway/refund';

        }
        else {
          $title = t('Capture');
          $refund_capture_link = 'admin/config/' . $value['id'] . '/uc_begateway/capture';

          $title2 = t('Void');
          $void_link = 'admin/config/' . $value['id'] . '/uc_begateway/void';
        }

      }
      else {
        $title = t('Refund');
        $refund_capture_link = 'admin/config/' . $value['id'] . '/uc_begateway/refund';
      }
    }

    if ($value['flag'] == '2') {
      $title2 = '';
      $void_link = '';
      $title = t('Refund');
      $refund_capture_link = 'admin/config/' . $value['id'] . '/uc_begateway/refund';
    }

    $order = uc_order_load($value['order_id']);
    $user = entity_metadata_wrapper('user', $value['uid']);

    $rows[] = array(
      $value['id'],
      l(t('Ubercart order: @id', array('@id' => $value['order_id'])), 'admin/store/orders/' . $value['order_id']),
      $date,
      l($user->name->value(), 'user/' . $user->uid->value()) . '<br />' . $user->mail->value(),
      $value['parent_uid'],
      t('Order amount: @amount', array('@amount' => uc_currency_format($order->order_total, $order->currency . ': '))),
      $value['types'],
      $value['status'],
      l($title, $refund_capture_link) . '<br />' . l($title2, $void_link),
    );
  }

  if (!count($rows)) {
    return t('There are no orders yet. Please create one.');
  }
  else {
    return theme('table', array('header' => $header, 'rows' => $rows));
  }
}

/**
 * Refund confirmation transaction.
 *
 * @param $form
 * @param $form_state
 * @param $order_id
 * @return array
 */
function uc_begateway_refund_form($form, &$form_state, $order_id) {

  $form_state['order_id'] = $order_id;

  $query = db_select('begateway_payments', 't')->fields('t', array(
    'id',
    'parent_uid',
    'price',
    'flag',
    'status',
    'order_id'
  ))->condition('t.id', $order_id)->execute();
  $value = $query->fetchAssoc();

  $form = array();
  $order = uc_order_load($value['order_id']);
  if ($value['flag'] == 2) {

    $form['amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Refund amount (Capture amount: @total )', array('@total' => uc_currency_format($value['price'], $order->currency . ' '))),
      '#default_value' => $value['price'],
      '#size' => 16,
    );
  }
  else {

    $form['amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Refund amount (Capture amount: @total )', array('@total' => uc_currency_format($value['price'], $order->currency . ' '))),
      '#default_value' => $order->order_total,
      '#size' => 16,
    );
  }
  $form = confirm_form($form, t('Are you sure you want to issue a refund?'), '/admin/config/uc_begateway/orders', '', t('Refund'), t('Cancel'), 'confirm');

  return $form;

}

/**
 * Refund validation form.
 *
 * @param $form
 * @param $form_state
 * @return bool
 */
function uc_begateway_refund_form_validate($form, &$form_state) {

  $id = $form_state['order_id'];

  $query = db_select('begateway_payments', 't')->fields('t', array(
    'id',
    'parent_uid',
    'price',
    'status',
    'order_id'
  ))->condition('t.id', $id)->execute();
  $value = $query->fetchAssoc();

  if (!is_numeric($form['amount']['#value']) || $form['amount']['#value'] <= 0) {
    form_set_error('amount', t('You must specify a positive numeric amount to refund.'));
    return FALSE;
  }

  if ($form['amount']['#value'] > $value['price']) {
    form_set_error('amount', t('You cannot refund more than you payed through beGateway.'));
    return FALSE;
  }

}

/**
 * Refund transaction.
 *
 * @param $form
 * @param $form_state
 */
function uc_begateway_refund_form_submit($form, &$form_state) {

  $id = $form_state['order_id'];

  $query = db_select('begateway_payments', 't')->fields('t', array(
    'id',
    'parent_uid',
    'price',
    'status',
    'order_id'
  ))->condition('t.id', $id)->execute();
  $value = $query->fetchAssoc();
  $order = uc_order_load($value['order_id']);
  libraries_load('beGateway');

  \BeGateway\Settings::$shopKey = variable_get('begateway_shop_key', '');
  \BeGateway\Settings::$shopId = variable_get('begateway_shop_id', '');
  \BeGateway\Settings::$gatewayBase = 'https://' . variable_get('begateway_payment_gateway_url', '');
  \BeGateway\Settings::$checkoutBase = 'https://' . variable_get('begateway_checkout_page_url', '');

  $price = $form['amount']['#value'];

  $refund = new \BeGateway\Refund;
  $refund->setParentUid($value['parent_uid']);
  $refund->money->setAmount($price);
  $refund->setReason('customer request');

  $refund_response = $refund->submit();

  if ($refund_response->isSuccess()) {
    db_update('begateway_payments')->fields(array(
      'status' => 'refunded',
      'price' => $value['price'] - $price,
      'parent_uid' => $refund_response->getUid(),
      'flag' => 0,
    ))->condition('id', $id)->execute();
    drupal_set_message(t("Refunded successfully.") . ' ' . t("UID: ") . $refund_response->getUid() . PHP_EOL);

    $comment = t('Transaction ID: @PayId. Refunded: @RefundedAmount. Remote ID: @Uid',
      array(
        '@PayId' => $order->order_id,
        '@RefundedAmount' => uc_currency_format($price, $order->currency . ' '),
        '@Uid' => $refund_response->getUid()
      )
    );

    uc_payment_enter($order->order_id, 'begateway', -1 * $price, 1, NULL, $comment);
    uc_cart_complete_sale($order);
    uc_order_update_status($order->order_id, 'completed');

  }
  else {
    drupal_set_message(t("Refund error:") . ' ' . $refund_response->getMessage(), 'error');
  }

  drupal_goto('/admin/config/uc_begateway/orders');

}

/**
 * Capture confirmation transaction.
 *
 * @param $form
 * @param $form_state
 * @param $order_id
 * @return array
 */
function uc_begateway_capture_form($form, &$form_state, $order_id) {

  $form_state['order_id'] = $order_id;

  $query = db_select('begateway_payments', 't')->fields('t', array(
    'id',
    'parent_uid',
    'price',
    'status',
    'order_id'
  ))->condition('t.id', $order_id)->execute();
  $value = $query->fetchAssoc();

  $order = uc_order_load($value['order_id']);

  $form = array();
  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Capture amount (Order amount: @total)', array('@total' => uc_currency_format($order->order_total, $order->currency . ' '))),
    '#default_value' => $order->order_total,
    '#size' => 16,
  );
  $form = confirm_form($form, t('Are you sure you want to issue a capture?'), '/admin/config/uc_begateway/orders', '', t('Capture'), t('Cancel'), 'confirm');

  return $form;
}

/**
 * Capture validation form.
 *
 * @param $form
 * @param $form_state
 * @return bool
 */
function uc_begateway_capture_form_validate($form, &$form_state) {

  $id = $form_state['order_id'];

  $query = db_select('begateway_payments', 't')->fields('t', array(
    'id',
    'parent_uid',
    'price',
    'status',
    'order_id'
  ))->condition('t.id', $id)->execute();
  $value = $query->fetchAssoc();

  if (!is_numeric($form['amount']['#value']) || $form['amount']['#value'] <= 0) {
    form_set_error('amount', t('You must specify a positive numeric amount to capture.'));
    return FALSE;
  }

  if ($form['amount']['#value'] > $value['price']) {
    form_set_error('amount', t('You cannot capture more than it was authorized through beGateway.'));
    return FALSE;
  }

}

/**
 * Capture transaction.
 *
 * @param $form
 * @param $form_state
 */
function uc_begateway_capture_form_submit($form, &$form_state) {

  $id = $form_state['order_id'];

  $query = db_select('begateway_payments', 't')->fields('t', array(
    'id',
    'parent_uid',
    'flag',
    'price',
    'status',
    'order_id'
  ))->condition('t.id', $id)->execute();
  $value = $query->fetchAssoc();
  libraries_load('beGateway');

  $order = uc_order_load($value['order_id']);

  \BeGateway\Settings::$shopKey = variable_get('begateway_shop_key', '');
  \BeGateway\Settings::$shopId = variable_get('begateway_shop_id', '');
  \BeGateway\Settings::$gatewayBase = 'https://' . variable_get('begateway_payment_gateway_url', '');
  \BeGateway\Settings::$checkoutBase = 'https://' . variable_get('begateway_checkout_page_url', '');

  $price = $form['amount']['#value'];

  $capture = new \BeGateway\Capture;
  $capture->setParentUid($value['parent_uid']);
  $capture->money->setAmount($value['price']);
  $capture_response = $capture->submit();

  if ($capture_response->isSuccess()) {

    $flag = 2;

    if ($value['flag'] == 2) {
      $flag = 0;
    }

    db_update('begateway_payments')->fields(array(
      'status' => 'Captured',
      'price' => $price,
      'parent_uid' => $capture_response->getUid(),
      'flag' => $flag,
    ))->condition('id', $id)->execute();
    drupal_set_message(t("Captured successfully.") . ' ' . t('UID: ') . $capture_response->getUid());

    $comment = t('Transaction ID: @PayId. Captured: @CapturedAmount. Remote ID: @Uid',
      array(
        '@PayId' => $order->order_id,
        '@RefundedAmount' => uc_currency_format($price, $order->currency . ' '),
        '@Uid' => $capture_response->getUid()
      )
    );
    uc_payment_enter($order->order_id, 'begateway', $price, 1, NULL, $comment);
    uc_cart_complete_sale($order);

    uc_order_update_status($order->order_id, 'payment_received');

  }
  else {
    drupal_set_message(t("Capture error:") . ' ' . $capture_response->getMessage(), 'error');
  }

  drupal_goto('/admin/config/uc_begateway/orders');

}

/**
 * Void confirmation transactions.
 *
 * @param $form
 * @param $form_state
 * @param $order_id
 * @return array
 */
function uc_begateway_void_form($form, &$form_state, $order_id) {

  $form_state['order_id'] = $order_id;

  $query = db_select('begateway_payments', 't')->fields('t', array(
    'id',
    'parent_uid',
    'price',
    'status',
    'order_id'
  ))->condition('t.id', $order_id)->execute();
  $value = $query->fetchAssoc();

  $order = uc_order_load($value['order_id']);

  $form = array();
  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Void amount') . ', ' . uc_currency_format($order->order_total, $order->currency . ' '),
    '#attributes' => array('disabled' => 'disabled'),
    '#default_value' => $order->order_total,
    '#size' => 16,
  );
  $form = confirm_form($form, t('Are you sure you want to issue a void?'), '/admin/config/uc_begateway/orders', '', t('Void'), t('Cancel'), 'confirm');

  return $form;

}

/**
 * Void transactions.
 *
 * @param $form
 * @param $form_state
 */
function uc_begateway_void_form_submit($form, &$form_state) {

  $id = $form_state['order_id'];
  libraries_load('beGateway');

  \BeGateway\Settings::$shopKey = variable_get('begateway_shop_key', '');
  \BeGateway\Settings::$shopId = variable_get('begateway_shop_id', '');
  \BeGateway\Settings::$gatewayBase = 'https://' . variable_get('begateway_payment_gateway_url', '');
  \BeGateway\Settings::$checkoutBase = 'https://' . variable_get('begateway_checkout_page_url', '');

  $query = db_select('begateway_payments', 't')->fields('t', array(
    'id',
    'parent_uid',
    'price',
    'status',
    'order_id'
  ))->condition('t.id', $id)->execute();

  $value = $query->fetchAssoc();
  $order = uc_order_load($value['order_id']);
  $void = new \BeGateway\Void;
  $void->setParentUid($value['parent_uid']);
  $void->money->setAmount($value['price'] / 100);
  $void_response = $void->submit();

  if ($void_response->isSuccess()) {

    db_update('begateway_payments')->fields(array(
      'status' => 'Void',
      'parent_uid' => $void_response->getUid(),
      'price' => '0',
      'flag' => '0',
    ))->condition('id', $id)->execute();

    $comment = t('Transaction ID: @PayId. Void: @VoidAmount. Remote ID: @Uid',
      array(
        '@PayId' => $order->order_id,
        '@VoidAmount' => uc_currency_format($price, $order->currency . ' '),
        '@Uid' => $void_response->getUid()
      )
    );
    uc_payment_enter($order->order_id, 'begateway', 0, 1, NULL, $comment);
    uc_cart_complete_sale($order);

    uc_order_update_status($order->order_id, 'canceled');

    drupal_set_message(t('Voided successfully.') . ' ' . t('UID: ') . $void_response->getUid());

  }
  else {
    drupal_set_message(t("Void error:") . ' ' . $void_response->getMessage(), 'error');
  }

  drupal_goto('/admin/config/uc_begateway/orders');
}

/**
 * Implements hook_uc_payment_method().
 */
function uc_begateway_uc_payment_method() {
  $methods['begateway'] = array(
    'name' => variable_get('begateway_payment_name', 'beGateway'),
    'title' => variable_get('begateway_payment_name', 'beGateway'),
    'callback' => 'uc_begateway_uc_payment_method_callback',
    'weight' => 1,
    'checkout' => TRUE,
    'redirect' => 'uc_begateway_form',
    'no_gateway' => TRUE,
  );
  return $methods;
}

/**
 * Implements hook_uc_payment_method().
 *
 * @param $op
 * @param $order
 * @param null $form
 * @param null $form_state
 * @return null
 */
function uc_begateway_uc_payment_method_callback($op, &$order, $form = NULL, &$form_state = NULL) {
  $days = array();
  for ($i=1;$i<32;$i++) {
    $days[$i] = $i;
  }

  switch ($op) {

    case 'settings':

      $form['begateway_payment_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Display payment name'),
        '#required' => TRUE,
        '#default_value' => variable_get('begateway_payment_name', 'beGateway'),
      );
      $form['begateway_shop_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Shop ID'),
        '#required' => TRUE,
        '#default_value' => variable_get('begateway_shop_id', ''),
      );
      $form['begateway_shop_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Shop Key'),
        '#required' => TRUE,
        '#default_value' => variable_get('begateway_shop_key', ''),
      );
      $form['begateway_payment_gateway_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Payment gateway domain'),
        '#required' => TRUE,
        '#default_value' => variable_get('begateway_payment_gateway_url', ''),
      );
      $form['begateway_checkout_page_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Checkout page domain'),
        '#required' => TRUE,
        '#default_value' => variable_get('begateway_checkout_page_url', ''),
      );
      $form['begateway_trans_type'] = array(
        '#type' => 'radios',
        '#title' => t('Type transaction'),
        '#default_value' => variable_get('begateway_trans_type', ''),
        '#options' => array(
          'one' => t('Authorization'),
          'two' => t('Payment'),
        )
      );
      $form['order_expiry_days'] = array(
        '#type' => 'select',
        '#title' => t('How many days an order is valid for payment'),
        '#options' => $days,
        '#default_value' => variable_get('order_expiry_days', '3')
      );
      $form['card_enable'] = array(
        '#type' => 'radios',
        '#title' => t('Enable bankcard payments'),
        '#default_value' => variable_get('card_enable', 0),
        '#options' => array(
          t('Yes'),
          t('No'),
        )
      );
      $form['card_halva_enable'] = array(
        '#type' => 'radios',
        '#title' => t('Enable Halva bankcard payments'),
        '#default_value' => variable_get('card_halva_enable', 1),
        '#options' => array(
          t('Yes'),
          t('No'),
        )
      );
      $form['erip_enable'] = array(
        '#type' => 'radios',
        '#title' => t('Enable ERIP'),
        '#default_value' => variable_get('erip_enable', 1),
        '#options' => array(
          t('Yes'),
          t('No'),
        )
      );
      $form['erip_service_no'] = array(
        '#type' => 'textfield',
        '#title' => t('ERIP service No'),
        '#default_value' => variable_get('erip_service_no', '99999999'),
      );

      return $form;
  }
}

/**
 * Implements hook_form().
 *
 * @param $form
 * @param $form_state
 * @param $order
 * @return mixed
 */
function uc_begateway_form($form, &$form_state, $order) {

  libraries_load('beGateway');
  global $language;

  \BeGateway\Settings::$shopKey = variable_get('begateway_shop_key');
  \BeGateway\Settings::$shopId = variable_get('begateway_shop_id');
  \BeGateway\Settings::$gatewayBase = 'https://' . variable_get('begateway_payment_gateway_url');
  \BeGateway\Settings::$checkoutBase = 'https://' . variable_get('begateway_checkout_page_url');

  $transaction = new \BeGateway\GetPaymentToken;

  if (variable_get('begateway_trans_type') != 'one') {
    $transaction->setPaymentTransactionType();
  }
  else {
    $transaction->setAuthorizationTransactionType();
  }

  $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
  $notification_url = url('uc_begateway/route/' . $order->order_id, array('absolute' => TRUE));
  $notification_url = str_replace('carts.local', 'webhook.begateway.com:8443', $notification_url);

  $transaction->money->setAmount($order->order_total);
  $transaction->money->setCurrency($order->currency);
  $transaction->setDescription(t('Order #') . $order->order_id);
  $transaction->setLanguage($language->language);

  $transaction->setNotificationUrl($notification_url);

  $transaction->setSuccessUrl(url('cart/begateway/complete/' . $order->order_id, array('absolute' => TRUE)));

  $transaction->setDeclineUrl(url('cart/checkout/review', array('absolute' => TRUE)));
  $transaction->setFailUrl(url('cart/checkout/review', array('absolute' => TRUE)));
  $transaction->setCancelUrl(url('cart/checkout/review', array('absolute' => TRUE)));
  $transaction->setExpiryDate(date("Y-m-d", (variable_get('order_expiry_days')+1)*24*3600 + time()));
  $transaction->setTrackingId($order->order_id);

  if (variable_get('card_enable') == 0) {
    $cc = new \BeGateway\PaymentMethod\CreditCard;
    $transaction->addPaymentMethod($cc);
  }

  if (variable_get('card_halva_enable') == 0) {
    $halva = new \BeGateway\PaymentMethod\CreditCardHalva;
    $transaction->addPaymentMethod($halva);
  }

  if (variable_get('erip_enable') == 0) {
    $erip = new \BeGateway\PaymentMethod\Erip(array(
      'order_id' => $order->order_id,
      'account_number' => strval($order->order_id),
      'service_no' => variable_get('erip_service_no')
    ));
    $transaction->addPaymentMethod($erip);
  }

  $transaction->customer->setFirstName($order->billing_first_name);
  $transaction->customer->setLastName($order->billing_last_name);
  if ($billing_country) {
    $transaction->customer->setCountry($billing_country[0]['country_iso_code_2']);
    if (in_array($billing_country[0]['country_iso_code_2'], array('US','CA'))) {
      $transaction->customer->setState(uc_get_zone_code($order->billing_zone));
    }
  }

  $transaction->customer->setAddress($order->billing_street1);
  $transaction->customer->setCity($order->billing_city);
  $transaction->customer->setZip($order->billing_postal_code);
  $transaction->customer->setEmail($order->primary_email);

  $response = $transaction->submit();

  if ($response->isSuccess()) {
    $form['#action'] = $response->getRedirectUrl();

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit Order'),
    );
  } else {
    watchdog('ubercart_payment_begateway', 'The website failed to get a payment token', array(), WATCHDOG_ERROR);
    drupal_set_message(t('The payment gateway is currently unavailable, please chose another payment method, or contact an administrator.'), 'error');
    drupal_set_message($response->getMessage(),'error');
    drupal_goto('cart/checkout');
  }

  return $form;
}

/**
 * Implements hook_complete().
 */
function uc_begateway_complete() {
  if ($_GET['status'] == 'successful') {
    $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
    drupal_goto('cart/checkout/complete');
  }
}

/**
 * Implements hook_libraries_info().
 */
function uc_begateway_libraries_info() {
  $libraries['beGateway'] = array(
    'name' => 'beGateway PHP library',
    'vendor url' => 'https://github.com/beGateway/begateway-api-php/tree/master',
    'download url' => 'https://github.com/beGateway/begateway-api-php/tree/master',
    'version arguments' => array(
      'file' => 'VERSION',
      'pattern' => '/^(.+)/'
    ),
    'files' => array(
      'php' => array(
        'lib/beGateway.php',
      ),
    ),
  );
  return $libraries;
}
